name: Blue-Green CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  DOCKER_REPO: thaksha98
  # Toggle between blue and green based on run number (even = blue, odd = green)
  NEW_VERSION: ${{ steps.toggle_version.outputs.color }}
  OLD_VERSION: ${{ steps.toggle_version.outputs.old_color }}

jobs:
  determine-color:
    runs-on: ubuntu-latest
    outputs:
      color: ${{ steps.set-color.outputs.result }}
      old_color: ${{ steps.set-color.outputs.old_result }}
    steps:
      - id: set-color
        run: |
          run_num=${{ github.run_number }}
          if (( run_num % 2 == 0 )); then
            echo "result=blue" >> $GITHUB_OUTPUT
            echo "old_result=green" >> $GITHUB_OUTPUT
          else
            echo "result=green" >> $GITHUB_OUTPUT
            echo "old_result=blue" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: determine-color
    runs-on: ubuntu-latest
    env:
      NEW_VERSION: ${{ needs.determine-color.outputs.color }}
      OLD_VERSION: ${{ needs.determine-color.outputs.old_color }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üîµüü¢ Build and Push Images: Frontend, Game, Order, Analytics
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Build and Push Frontend (${{ env.NEW_VERSION }})
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKER_REPO }}/lugx-frontend:${{ env.NEW_VERSION }}
          context: .

      - name: Build and Push Game Service (${{ env.NEW_VERSION }})
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKER_REPO }}/lugx-game-service:${{ env.NEW_VERSION }}
          context: backend/game-service

      - name: Build and Push Order Service (${{ env.NEW_VERSION }})
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKER_REPO }}/lugx-order-service:${{ env.NEW_VERSION }}
          context: backend/order-service

      - name: Build and Push Analytics Service (${{ env.NEW_VERSION }})
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKER_REPO }}/lugx-analytics-service:${{ env.NEW_VERSION }}
          context: backend/analytics-service

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # ‚ò∏Ô∏è Deploy to Kubernetes Cluster
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Deploy New Version to Kubernetes
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          # Decode kubeconfig
          echo "$KUBECONFIG_DATA" | base64 -d > ./kubeconfig
          export KUBECONFIG=./kubeconfig

          # Set new version images
          kubectl set image deployment/frontend-deployment-${{ env.NEW_VERSION }}   frontend=${{ env.DOCKER_REPO }}/lugx-frontend:${{ env.NEW_VERSION }}   -n lugx
          kubectl set image deployment/game-service-${{ env.NEW_VERSION }}         game-service=${{ env.DOCKER_REPO }}/lugx-game-service:${{ env.NEW_VERSION }}         -n lugx
          kubectl set image deployment/order-service-${{ env.NEW_VERSION }}        order-service=${{ env.DOCKER_REPO }}/lugx-order-service:${{ env.NEW_VERSION }}        -n lugx
          kubectl set image deployment/analytics-service-${{ env.NEW_VERSION }}    analytics-service=${{ env.DOCKER_REPO }}/lugx-analytics-service:${{ env.NEW_VERSION }}    -n lugx

          # Wait for rollouts
          kubectl rollout status deployment/frontend-deployment-${{ env.NEW_VERSION }}   -n lugx --timeout=60s
          kubectl rollout status deployment/game-service-${{ env.NEW_VERSION }}         -n lugx --timeout=60s
          kubectl rollout status deployment/order-service-${{ env.NEW_VERSION }}        -n lugx --timeout=60s
          kubectl rollout status deployment/analytics-service-${{ env.NEW_VERSION }}    -n lugx --timeout=60s

          echo "‚úÖ All new version deployments are ready."

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üß™ Run Integration Tests
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Run Integration Tests
        run: |
          python3 tests/test_api.py --target ${{ env.NEW_VERSION }} --base-url http://192.168.8.240

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üö¶ Switch Traffic: Blue ‚Üî Green
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Switch Services to New Version
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBECONFIG_DATA" | base64 -d > ./kubeconfig
          export KUBECONFIG=./kubeconfig

          # Patch all services to point to new version
          kubectl patch service frontend-service     -n lugx -p '{"spec":{"selector":{"version":"${{ env.NEW_VERSION }}"}}}'
          kubectl patch service game-service         -n lugx -p '{"spec":{"selector":{"version":"${{ env.NEW_VERSION }}"}}}'
          kubectl patch service order-service        -n lugx -p '{"spec":{"selector":{"version":"${{ env.NEW_VERSION }}"}}}'
          kubectl patch service analytics-service    -n lugx -p '{"spec":{"selector":{"version":"${{ env.NEW_VERSION }}"}}}'

          echo "‚úÖ Traffic switched to ${{ env.NEW_VERSION }} version"

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # üóëÔ∏è Optional: Scale Down Old Version (Keep for Rollback if Needed)
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Scale Down Old Version
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBECONFIG_DATA" | base64 -d > ./kubeconfig
          export KUBECONFIG=./kubeconfig

          # Scale old deployments to 0
          kubectl scale deployment frontend-deployment-${{ env.OLD_VERSION }}   --replicas=0 -n lugx
          kubectl scale deployment game-service-${{ env.OLD_VERSION }}         --replicas=0 -n lugx
          kubectl scale deployment order-service-${{ env.OLD_VERSION }}        --replicas=0 -n lugx
          kubectl scale deployment analytics-service-${{ env.OLD_VERSION }}    --replicas=0 -n lugx

          echo "üóëÔ∏è Old (${{ env.OLD_VERSION }}) deployments scaled down"
