name: Lugx Gaming CI/CD Pipeline (Fast & Reliable)

on:
  push:
    branches: [ main ]

env:
  DOCKER_REPO: thaksha98
  KUBE_NAMESPACE: lugx

jobs:
  determine-color:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set-color.outputs.new_color }}
      old_version: ${{ steps.set-color.outputs.old_color }}
    steps:
      - id: set-color
        run: |
          run_num=${{ github.run_number }}
          if (( run_num % 2 == 0 )); then
            echo "new_color=blue" >> $GITHUB_OUTPUT
            echo "old_color=green" >> $GITHUB_OUTPUT
          else
            echo "new_color=green" >> $GITHUB_OUTPUT
            echo "old_color=blue" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: determine-color
    runs-on: self-hosted
    env:
      DOCKER_REPO: thaksha98
      KUBE_NAMESPACE: lugx
      NEW_VERSION: ${{ needs.determine-color.outputs.new_version }}
      OLD_VERSION: ${{ needs.determine-color.outputs.old_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and Push Frontend
        run: |
          docker build -t $DOCKER_REPO/lugx-frontend:$NEW_VERSION frontend/
          docker push $DOCKER_REPO/lugx-frontend:$NEW_VERSION

      - name: Build and Push Game Service
        run: |
          docker build -t $DOCKER_REPO/lugx-game-service:$NEW_VERSION backend/game-service/
          docker push $DOCKER_REPO/lugx-game-service:$NEW_VERSION

      - name: Build and Push Order Service
        run: |
          docker build -t $DOCKER_REPO/lugx-order-service:$NEW_VERSION backend/order-service/
          docker push $DOCKER_REPO/lugx-order-service:$NEW_VERSION

      - name: Build and Push Analytics Service
        run: |
          docker build -t $DOCKER_REPO/lugx-analytics-service:$NEW_VERSION backend/analytics-service/
          docker push $DOCKER_REPO/lugx-analytics-service:$NEW_VERSION

      - name: Configure KUBECONFIG
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy & Switch Traffic (Blue-Green)
        run: |
          export NS=$KUBE_NAMESPACE

          # Update deployments
          kubectl set image deployment/frontend-deployment-$NEW_VERSION frontend=$DOCKER_REPO/lugx-frontend:$NEW_VERSION -n $NS
          kubectl scale deployment frontend-deployment-$NEW_VERSION --replicas=2 -n $NS
          kubectl set image deployment/game-service-$NEW_VERSION game-service=$DOCKER_REPO/lugx-game-service:$NEW_VERSION -n $NS
          kubectl scale deployment game-service-$NEW_VERSION --replicas=2 -n $NS
          kubectl set image deployment/order-service-$NEW_VERSION order-service=$DOCKER_REPO/lugx-order-service:$NEW_VERSION -n $NS
          kubectl scale deployment order-service-$NEW_VERSION --replicas=2 -n $NS
          kubectl set image deployment/analytics-service-$NEW_VERSION analytics-service=$DOCKER_REPO/lugx-analytics-service:$NEW_VERSION -n $NS
          kubectl scale deployment analytics-service-$NEW_VERSION --replicas=2 -n $NS

          # Wait for rollouts
          kubectl rollout status deployment/frontend-deployment-$NEW_VERSION -n $NS --timeout=180s
          kubectl rollout status deployment/game-service-$NEW_VERSION -n $NS --timeout=180s
          kubectl rollout status deployment/order-service-$NEW_VERSION -n $NS --timeout=180s
          kubectl rollout status deployment/analytics-service-$NEW_VERSION -n $NS --timeout=180s

          # Switch traffic
          kubectl patch service frontend-service -n $NS -p '{"spec":{"selector":{"version":"'$NEW_VERSION'"}}}'
          kubectl patch service game-service -n $NS -p '{"spec":{"selector":{"version":"'$NEW_VERSION'"}}}'
          kubectl patch service order-service -n $NS -p '{"spec":{"selector":{"version":"'$NEW_VERSION'"}}}'
          kubectl patch service analytics-service -n $NS -p '{"spec":{"selector":{"version":"'$NEW_VERSION'"}}}'

          echo "✅ Traffic switched to $NEW_VERSION"

          # Scale down old version (only if different from new)
          if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            kubectl scale deployment frontend-deployment-$OLD_VERSION --replicas=0 -n $NS || echo "⚠️ Old frontend-deployment-$OLD_VERSION not found"
            kubectl scale deployment game-service-$OLD_VERSION --replicas=0 -n $NS || echo "⚠️ Old game-service-$OLD_VERSION not found"
            kubectl scale deployment order-service-$OLD_VERSION --replicas=0 -n $NS || echo "⚠️ Old order-service-$OLD_VERSION not found"
            kubectl scale deployment analytics-service-$OLD_VERSION --replicas=0 -n $NS || echo "⚠️ Old analytics-service-$OLD_VERSION not found"
          fi

      - name: Run Integration Tests
        run: |
          python3 tests/test_api.py --target $NEW_VERSION --base-url http://192.168.8.240
